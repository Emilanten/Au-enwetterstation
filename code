[code]
#include <DHT.h>
#include <ESP8266WiFi.h>


// replace with your channel’s thingspeak API key,
String apiKey = "408UE5S20MC5YZE7";
const char* ssid = "FRITZWLAN";
char* password = "sebaclauss";
/*char* EMAIL_ZU = "photocrack@web.de";
  char* EMAIL_VON = "sebastian.clauss42@gmail.com";
  char* SMTP_NAME = "sebastian.clauss42";
  char* SMTP_PASSWORT = "";
  char* SMTP_SERVER = "smtp.gmail.com";
  int SMTP_PORT = 587;*/


const char* server = "api.thingspeak.com";
#define DHTPIN 13 // Pin, an dem der DHT22 hängt
#define DHTPOWERPIN 14

ADC_MODE(ADC_VCC);
unsigned long CONNECTIONTIMEOUT = 60000;
unsigned long Zeit = 0;
byte Messungen = 0;
byte Lesefehler = 5;
float Spannung = 0;
float Warnspannung = 3100;
float Grenzspannung = 3000;

//DHT dht(DHTPIN, DHT11,15);
DHT dht(DHTPIN, DHT22, 15); //bei Verwendung des DHT22

WiFiClient client;

float aTemp = 0;
float aHumi = 0;


void SensorLesen() {
  Serial.print("Messen");
  digitalWrite(DHTPOWERPIN, 1);
  delay(2500);
  aHumi = dht.readHumidity();
  aTemp = dht.readTemperature();
  Serial.print(aHumi);
  Serial.print(aTemp);
  while (isnan(aHumi) || isnan(aTemp)) {
    delay(2500);
    aHumi = dht.readHumidity();
    aTemp = dht.readTemperature();
    Messungen++;
    if (Messungen >= Lesefehler) {
      WiFi.disconnect();
      delay(100);
      ESP.restart();
      delay(100);
    }
  }
  digitalWrite(DHTPOWERPIN, 0);
}

void Akkuwarnung() {

}

void DatenSenden() {
  if (client.connect(server, 80)) {
    String postStr = apiKey;
    postStr += "&field1=";
    postStr += String(aTemp);
    postStr += "&field2=";
    postStr += String(aHumi);
    postStr += "&field3=";
    postStr += String(ESP.getVcc()).substring(0, 1);
    postStr += ".";
    postStr += String(ESP.getVcc()).substring(1);
    postStr += "\r\n\r\n";
    client.print("POST /update HTTP/1.1\n");
    client.print("Host: api.thingspeak.com\n");
    client.print("Connection: close\n");
    client.print("X-THINGSPEAKAPIKEY: " + apiKey + "\n");
    client.print("Content-Type: application/x-www-form-urlencoded\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\n\n");
    client.print(postStr);
  }
  client.stop();
  delay(5000);
}

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.print(String(ESP.getVcc()).substring(0, 1));
  Serial.print(",");
  Serial.print(String(ESP.getVcc()).substring(1));
  pinMode(DHTPOWERPIN, OUTPUT);

  if (ESP.getVcc() <= Grenzspannung) {
    Serial.print("Grenzspannung");
    ESP.deepSleep(0);
    delay(100);
  }

  if (ESP.getVcc() <= Warnspannung) {
    Akkuwarnung();
  }

  WiFi.mode(WIFI_STA);

  WiFi.begin(ssid, password);
  Zeit = millis();

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    if (millis() - Zeit >  CONNECTIONTIMEOUT) {
      ESP.deepSleep(120e6);
    }
  }
  Serial.print("WLAN verbunden");
  dht.begin();
}



void loop() {
  Serial.print("lesen");
  SensorLesen();
  Serial.print("Senden");
  DatenSenden();
  Serial.print("Warten");

  ESP.deepSleep(300e6); //deep sleep für 300 Sekunden
}
[/code]
